{
    [1]: {
        'need_do': {
            -- 进入该状态需要做的事情
        };
        'event': {
            -- 该状态下需处理的事件集合
            [eventID]: {
                'juge': {
                    -- 判断是否满足条件
                    'do':{
                        -- 满足条件做事的集合
                    };
                    'else_do':{
                        -- 不满足条件做事的集合
                    }
                }
            }
        }
    }
}

向状态机发送一个事件，状态机判断是否处理这个这个事件

原子单元 check-do

先不考虑状态跳转


function sendEvent(obj, event, data){
    
};

fucntion doEvent(obj, event, data){
      
};

function doAction(obj, );

消息事件，定时器超时事件，

-- 原子操作 check-do 
-- 状态机的4个要素: 现态 条件 动作 次态
-- 现态：当前所处的状态 
-- 条件：又称为事件，当一个条件被满足，将会触发一个动作，或者执行一次状态的迁移
-- 动作：条件满足后执行的动作。动作执行完毕后，可以迁移到新的状态，也可以依旧保持原状态。动作不是必需的，当条件满足后，也可以不执行任何动作，直接迁移到新状态。
-- 次态：条件满足后要迁往的新状态。次态是相对于现态而言的，次态一旦被激活，就转变成新的现态了。
-- 状态机可以有两种实现方法：在状态中判断事件和在事件中判断状态。
目前常见的AI模型包括FSM(有限状态机，包括HFSM分层有限状态机)和Behavior Tree(行为树)两大类。

行为树节点的行为逻辑可分为四种：顺序节点、条件节点、选择节点和行为节点
行为树节点从结构上可以分为组合节点和叶节点。叶节点分为条件节点和行为节点。

选择节点：
从左到右依次执行所有子节点，只要子节点返回failure，就继续执行后续子节点，直到有一个节点返回success或running为止，这时它会停止后续子节点的执行，向父节点返回success或running。若所有子节点都返回failure，那么它向父节点返回failure。需要注意的是，当子节点返回running时选择节点会“记录”返回running的这个子节点，下个迭代会直接从该节点开始执行（行为节点对应的代码执行时间较长，这时返回running）。

顺序节点：
它会从左到右依次执行所有子节点，只要子节点返回success，它就继续执行后续子节点，直到有一个节点返回failure或running为止，这时它会停止后续子节点的执行，向父节点返回failure或running。若所有子节点都返回success，那么它向父节点返回success。
它与选择节点正好是相反的感觉（选择节点类似于解决怎么进入这个房间如“爆破”、“踹门”，而顺序节点类似于解决能不能成功做这一件事如“爆破”，我有没有炸弹包，引线，火源）

行为树拥有3种节点：
    根节点 Root
    逻辑节点(可拓展)
        Priority Selector
        Sequence
        Parallel
    行为节点
行为树在复杂的情况下比有限状态机更清晰，更可拓展
行为树有利于逻辑的重用
设计得好的行为树可以千变万化


你好，我是一个正在运营的游戏项目程序经理，我也设计了一套策划使用的脚本系统，目前我们游戏中的所有任务，ai,副本，技能，物品逻辑，活动，都是基于这套脚本系统，我这套脚本系统思路是可以让策划自定义一个状态机，程序也是提供了事件，判断，执行这3类原子功能，我们这里叫做event, juge, need_do，比较土的名字，呵呵，策划可以通过脚本自定义一个状态机，具体方式是给这个状态机添加很多个状态，然后分别定义每个状态需要执行的need_do, 可以接收的event, 收到event后需要做的juge, 和需要执行的need_do, 或者跳转到下一个状态，来实现他们要的逻辑，我把这个东西定义成了一个叫logic_center的类，这个类提供一个逻辑绑定功能，只有用这个类绑定一个对象，指定event列表，juge函数列表，和need_do函数列表那么这个对象就支持脚本配置的功能了，这省了我们程序这边开发的很多工作量，我们只用提供这些need_do函数, juge函数, 以及游戏中某件事情发生时发出event事件，策划就可以配置出想要的逻辑，而且策划可以自己快速的看到自己想要的效果，而不用走很长的程序提交，测试部测试，策划再重新提需求的过程，目前效率基本上可以接收，目前我们随然可以搞定大部分经常变化的逻辑，但我们这个编辑器是针对一个具体对象的，所以象军团联赛这种还没法支持，希望能有机会能和你讨论一下关于脚本编辑器的思路,qq:6975356

我觉得这里面的关键可能不是触发器/EVENT放在哪个层面执行，而是如何抽象核心事件。
核心事件包括：游戏内对象能感知到什么（到达某个区域、被攻击、视野范围看到什么）、能做什么（移动、攻击、巡逻、对话）。其中具体的如何移动（线路选择）、如何攻击（优先打远程/脆弱兵种/魔法兵种；远程/脆弱/魔法兵种优先闪避然后才是攻击）之类则是固化的AI，已经包括在移动/攻击逻辑里面了。
然后就不再应该有AI出现了。剧情只是一个伴随player的剧本而已。player的动作会触发这个剧本的不同阶段。
核心事件抽象的目标应该是：除非极其特殊的情况，否则不应在核心事件之外出现复杂的逻辑判断。


行为树还是有很多问题的。
1. nontrivial overhead，尤其是树比较深得时候。
2. 不适合响应式的AI，写着写着就会退化成扁平的有大量predicate的树，比FSM还难管理。
3. BTAction这个抽象有很大问题。action的granularity不好定义，而且action之间经常会共同修改一些状态，需要在编辑的时候很小心。

Hi，你的评论一针见血 :D 1. 2. 的确都是行为树的缺点，我们也更多只能去减少这些负面的影响。 例如 1. 减少update的次数增加。因为行为树用于AI的话，未必需要60次/秒的准确度。 2. 在每一个subtree的precondition增加一个flag test，例如一个32 bit的int。然后在增加一个globle event parallel node，放在树的顶端，用来检测事件，如果某事件发生，需要进行自动反击敌人，就将blackboard里面的event flag设置为0000...0010（假设第二个bit代表攻击subtree），那么在攻击subtree之前的precondition的flag test都会失败，而攻击subtree则成功。 3. 第三点其实是关乎编程能力的了，怎么分析一个逻辑应该是继续细分，还是应该作为一个整体。


便于行为建模，
便于用程序控制流程，
便于将当前行为、决策目标二者进行平衡。


日志系统
监控系统
代码模块化
桌子  游戏  玩家

mysql  redis  memcached



update niuniu.niuniu_tables set min_coins=1000, chips=500, service_charge=300, credit=0.3 where ttype=1 and tlevel = 1 and tid > 0;
update niuniu.niuniu_tables set min_coins=5000, chips=1000, service_charge=500, credit=0.5 where ttype=1 and tlevel = 2 and tid > 0;
update niuniu.niuniu_tables set min_coins=15000, chips=2000, service_charge=1000, credit=1 where ttype=1 and tlevel = 3 and tid > 0;
update niuniu.niuniu_tables set min_coins=50000, chips=10000, service_charge=3000, credit=3 where ttype=1 and tlevel = 4 and tid > 0;
update niuniu.niuniu_tables set min_coins=1000, chips=30, service_charge=300, credit=0.3 where ttype=2 and tlevel = 1 and tid > 0;
update niuniu.niuniu_tables set min_coins=5000, chips=50, service_charge=500, credit=0.5 where ttype=2 and tlevel = 2 and tid > 0;
update niuniu.niuniu_tables set min_coins=12000, chips=100, service_charge=800, credit=0.8 where ttype=2 and tlevel = 3 and tid > 0;
update niuniu.niuniu_tables set min_coins=100000, chips=1500, service_charge=9000, credit=9 where ttype=2 and tlevel = 4 and tid > 0;
update niuniu.niuniu_tables set min_coins=1000, chips=500, service_charge=300, credit=0.3 where ttype=4 and tlevel = 1 and tid > 0;
update niuniu.niuniu_tables set min_coins=5000, chips=1000, service_charge=500, credit=0.5 where ttype=4 and tlevel = 2 and tid > 0;
update niuniu.niuniu_tables set min_coins=15000, chips=2000, service_charge=1000, credit=1 where ttype=4 and tlevel = 3 and tid > 0;
update niuniu.niuniu_tables set min_coins=50000, chips=10000, service_charge=3000, credit=3 where ttype=4 and tlevel = 4 and tid > 0; 
update niuniu.niuniu_tables set min_coins=1000, chips=100, service_charge=200, credit=0.2 where ttype=5 and tlevel = 1 and tid > 0;
update niuniu.niuniu_tables set min_coins=5000, chips=300, service_charge=500, credit=0.5 where ttype=5 and tlevel = 2 and tid > 0;
update niuniu.niuniu_tables set min_coins=20000, chips=500, service_charge=4000, credit=4 where ttype=5 and tlevel = 3 and tid > 0;
update niuniu.niuniu_tables set min_coins=100000, chips=1000, service_charge=8000, credit=8 where ttype=5 and tlevel = 4 and tid > 0;



