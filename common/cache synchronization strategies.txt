错误的更新缓存代码的逻辑：先删除缓存，然后再更新数据库

1: cache-aside
取数据：
失效： 应用程序先从cache取数据，没有得到，则从数据库中取数据，成功后，放到缓存中。
命中： 应用程序从cache中取数据，取到后返回。
更新数据：
先把数据存到数据库中，成功后，再让缓存失效。

2: read-through

3: write-through

4: write-behind caching


数据冗余情况下考虑数据的一致性和性能的问题：
要想让数据有高可用性，就得写多份数据。
写多份的问题会导致数据一致性的问题。
数据一致性的问题有会引发性能问题。

一致性分为三种：
weak弱一致性：当你写入新值后，读操作在数据副本上可能读出来，也可能读不出来。
eventually最终一致性：当你写入一个新值后，有可能读不出来，但在某个时间窗口后保证最终能读出来。(DNS,、电子邮件)
strong强一致性：新的数据一旦写入，在任意副本任意时刻都能读到新值。(文件系统、RDBMS、Azure Table)