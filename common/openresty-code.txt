

ngx_event_process_init(ngx_cycle_t *cycle);

ngx_queue_init(&ngx_posted_accept_events);
ngx_queue_init(&ngx_posted_events);
ngx_queue_init(&ngx_posted_delayed_events);



ngx_process_events_and_timers(ngx_cycle_t *cycle);

ngx_queue_empty(&ngx_posted_delayed_events);
ngx_process_events(cycle, timer, flags);
ngx_event_process_posted(cycle, &ngx_posted_accept_events);
ngx_event_process_posted(cycle, &ngx_posted_events);

ngx_queue_empty(&ngx_posted_delayed_events)
ngx_queue_head(&ngx_posted_delayed_events);
ngx_queue_data(q, ngx_event_t, queue);
ngx_queue_sentinel(&ngx_posted_delayed_events);
ngx_delete_posted_event(ev);
ev->handler(ev);


nginx使用了间接回调机制，结合upstream机制的使用来说明一下，首先明确几个事实：
1）其实ngxin和下游客户端的连接使用的是ngx_http_connection_t，每个连接对应着一个读事件、一个写事件，epoll监听队列监听的是事件（ngx_event_t），但是事件的data字段对应于这个事件所属的连接（ngx-connection_t）。但是nginx和上游服务器之间的连接使用的ngx_peer_connection_t，其实ngx_peer_connection_t是ngx_connection_t结构体的封装，前者包括了后者，算是后者的高级应用
2）ngx_connection_t对应nginx和客户端的连接，每个这样的连接都有一个请求（ngx_http_request_t）与之相对应，同时请求中有连个字段，write_event_handler和read_event_handler，这连个字段属于请求的读写回调，但是他很显然不能被激活，能激活的就是读写事件（ngx_event_t）
3）在HTTP请求的后期阶段，nginx通过连接上的读写事件回调（这个已经被epoll监控）来间接调用请求上的读写回调，这么一来，如果想该变请求上的流程，只需要修改
ngx_http_request_t上的read_event_handler和write_event_handler即可，这样的实现可以在ngx_http_handler函数中体现
4）nginx在处理upstream和上游的连接时，每一个upstream连接（ngx_peer_connection_t）对应一个upstream机制(ngx_http_upstream_t)，因为upstream的连接也可以看成ngx-connection_t,所以和ngx_connection_t类似，ngx_http_upstream_t中也有两个字段read_event_handler和write_event-handler,这样在处理和上游的连接上的读写回调时也是间接调用了ngx_http_upstream_t的读写回调函数 这个在ngx_http_upstream_connection中可以看到 c=u->peer.connection，这里的c(ngx-connection_t)是和上游服务器之间的连接
c->write->hanlder = ngx_http_upstream_handler，在这一行和接下来的几行，认真阅读，会发现ngx_http_upstream_handler和ngx_http_handler有相似之处
5）这么一来，在接下来的处理中只需关注ngx_http_upstream_t上的读写（write_event_handler & read_event_handler）即可完成nginx和上游服务器之间的交互，只需关系ngx_http_request_t中的读写（write_event_handler & read_event_handler）即可完成nginx和客户端之间的监护
（总结：在连诶http请求和经过upstream机制的请求时，一定要明白当前的ngx_connection_t是指nginx和谁之间的连接）



ngx_http_init_phase_handlers(ngx_conf_t *cf, ngx_http_core_main_conf_t *cmcf); //初始化http请求回调函数

nginx模块：
event module: 搭建了独立于操作系统的事件处理机制的框架，及提供了各具体事件的处理。包括 ngx_events_module， ngx_event_core_module和ngx_epoll_module 等。Nginx 具体使用何种事件处理模块，这依赖于具体的操作系统和编译选项。

phase handler: 此类型的模块也被直接称为 handler 模块。主要负责处理客户端请求并产生待响应内容，比如 ngx_http_static_module 模块，负责客户端的静态页面请求处理并将对应的磁盘文件准备为响应内容输出。

output filter: 也称为 filter 模块，主要是负责对输出的内容进行处理，可以对输出进行修改。例如，可以实现对输出的所有 html 页面增加预定义的 footbar 一类的工作，或者对输出的图片的 URL 进行替换之类的工作。

upstream: upstream 模块实现反向代理的功能，将真正的请求转发到后端服务器上，并从后端服务器上读取响应，发回客户端。upstream 模块是一种特殊的 handler，只不过响应内容不是真正由自己产生的，而是从后端服务器上读取的。

load-balancer: 负载均衡模块，实现特定的算法，在众多的后端服务器中，选择一个服务器出来作为某个请求的转发服务器。


worker 进程中，ngx_worker_process_cycle()函数就是这个无限循环的处理函数。在这个函数中，一个请求的简单处理流程如下：
操作系统提供的机制（例如 epoll, kqueue 等）产生相关的事件。
接收和处理这些事件，如是接受到数据，则产生更高层的 request 对象。
处理 request 的 header 和 body。
产生响应，并发送回客户端。
完成 request 的处理。
重新初始化定时器及其他事件。

nginx源码注释：
https://github.com/chronolaw/annotated_nginx
nginx源码分析之设计之美：
http://www.bijishequ.com/detail/54155

question:
1: lua如何嵌套入nginx的
ngx_http_lua_new_state(lua_State *parent_vm, ngx_cycle_t *cycle,ngx_http_lua_main_conf_t *lmcf, ngx_log_t *log);
ngx_http_lua_create_ctx(ngx_http_request_t *r);
ngx_http_lua_init(ngx_conf_t *cf);

2: nginx如何做到模块化的

3: stream模块初始化luaVM
static ngx_int_t ngx_stream_lua_init(ngx_conf_t *cf);
static ngx_inline ngx_stream_lua_ctx_t * ngx_stream_lua_create_ctx(ngx_stream_session_t *r);

4: http配置模块解析
// ngx_http_config.h
// 标志指令的类型，出现的位置
#define NGX_HTTP_MAIN_CONF        0x02000000
#define NGX_HTTP_SRV_CONF         0x04000000
#define NGX_HTTP_LOC_CONF         0x08000000
#define NGX_HTTP_UPS_CONF         0x10000000
#define NGX_HTTP_SIF_CONF         0x20000000
#define NGX_HTTP_LIF_CONF         0x40000000
#define NGX_HTTP_LMT_CONF         0x80000000
// nginx_http.c
// 解析http{}配置块，里面有server{}/location{}等
// 只有出现这个指令才会在conf_ctx里创建http配置，避免内存浪费
// 统计http模块的数量,设置http模块的ctx_index，即http模块自己的序号
// 调用每个http模块的create_xxx_conf函数，创建配置结构体
// 初始化http处理引擎的阶段数组，调用ngx_array_init
// 整理所有的http handler模块，填入引擎数组
// 调用ngx_create_listening添加到cycle的监听端口数组，只是添加，没有其他动作
// 设置有连接发生时的回调函数ngx_http_init_connection
static char *ngx_http_block(ngx_conf_t *cf, ngx_command_t *cmd, void *conf);

5: listen放在server里面的吗，可以放到http中吗
ngx_conf_t
ngx_cycle_t
ngx_command_t
ngx_module_t
ngx_http_conf_ctx_t

6: 指针的指针的用途
需要修改指针指向的时候，参数传入指针的指针

7: http处理阶段是如何添加handler的, NGX_HTTP_MODULE 类型的模块中的ctx就是指向ngx_http_module_t的指针
// http模块的函数表，在配置解析阶段被框架调用
typedef struct {
    // ngx_http_block里，创建配置结构体后，开始解析之前调用
    // 常用于添加变量定义
    ngx_int_t   (*preconfiguration)(ngx_conf_t *cf);

    // ngx_http_block里，解析、合并完配置后调用
    // 常用于初始化模块的phases handler
    ngx_int_t   (*postconfiguration)(ngx_conf_t *cf);

    // 创建模块的main配置，只有一个，在http main域
    void       *(*create_main_conf)(ngx_conf_t *cf);

    // 初始化模块的main配置，只有一个，在http main域
    char       *(*init_main_conf)(ngx_conf_t *cf, void *conf);

    // 创建、合并模块的srv配置
    void       *(*create_srv_conf)(ngx_conf_t *cf);
    char       *(*merge_srv_conf)(ngx_conf_t *cf, void *prev, void *conf);

    // 创建、合并模块的location配置
    void       *(*create_loc_conf)(ngx_conf_t *cf);
    char       *(*merge_loc_conf)(ngx_conf_t *cf, void *prev, void *conf);
} ngx_http_module_t;
模块需注册postconfiguration函数，在此函数中实现
cmcf = ngx_http_conf_get_module_main_conf(cf, ngx_http_core_module);
h = ngx_array_push(&cmcf->phases[NGX_HTTP_REWRITE_PHASE].handlers);
if (h == NULL) {
    return NGX_ERROR;
}
*h = ngx_http_lua_rewrite_handler;
1:  preconfiguration    ngx_http_block
2:  postconfiguration   ngx_http_block
3:  create_main_conf    ngx_http_block
4:  init_main_conf      ngx_http_block
5:  create_srv_conf     ngx_http_block  ngx_http_core_server  ngx_http_upstream
6:  merge_srv_conf      ngx_http_merge_servers
7:  create_loc_conf     ngx_http_block  ngx_http_core_server  ngx_http_core_location  ngx_http_core_limit_except
                        ngx_http_upstream  ngx_http_rewrite_if
8:  merge_loc_conf      ngx_http_merge_servers  ngx_http_merge_locations   
配置解析发生在ngx_http_block内，server和location配置可能在别的方法中生成
ngx_http_block何时被调用，会不会关联配置文件  
解析配置文件，遇到http关键字时触发。
开辟一块内存存储ngx_http_conf_ctx_t; ctx指向该内存，cf指向ctx。
ctx = ngx_pcalloc(cf->pool, sizeof(ngx_http_conf_ctx_t));
*(ngx_http_conf_ctx_t **) conf = ctx;
ctx->main_conf = ngx_pcalloc(cf->pool, sizeof(void *) * ngx_http_max_module);
ctx->srv_conf  = ngx_pcalloc(cf->pool, sizeof(void *) * ngx_http_max_module);
ctx->loc_conf  = ngx_pcalloc(cf->pool, sizeof(void *) * ngx_http_max_module);
遍历NGX_HTTP_MODULE模块，加载
ctx->main_conf[mi] = module->create_main_conf(cf);
ctx->srv_conf[mi]  = module->create_srv_conf(cf);
ctx->loc_conf[mi]  = module->create_loc_conf(cf);
加载NGX_HTTP_NODULE模块的preconfigure方法
module->preconfiguration(cf)
解析配置文件中的http模块
rv = ngx_conf_parse(cf, NULL);
遍历NGX_HTTP_MODULE模块，加载
rv = module->init_main_conf(cf, ctx->main_conf[mi]);
合并server, location模块
rv = ngx_http_merge_servers(cf, cmcf, module, mi);
遍历server数组，创建location树
ngx_http_init_locations(cf, cscfp[s], clcf);
ngx_http_init_static_location_trees(cf, clcf);
初始化http处理引擎的阶段数组
ngx_http_init_phases(cf, cmcf);
ngx_http_init_headers_in_hash(cf, cmcf);
遍历NGX_HTTP_MODULE，加载  // 通常是向phase数组里添加handler
module->postconfiguration(cf);
初始化变量数组
ngx_http_variables_init_vars(cf);
整理所有的http handler模块，填入引擎数组
ngx_http_init_phase_handlers(ngx_conf_t *cf, ngx_http_core_main_conf_t *cmcf);
对已经整理好的监听数组排序，调用ngx_create_listening添加到cycle的监听数组，只是添加，设置连接发生时的回调函数ngx_http_init_connection
ngx_http_optimize_servers(cf, cmcf, cmcf->ports);

8: ngx_cycle_t->conf_ctx
void ****conf_ctx;
cycle->conf_ctx = ngx_pcalloc(pool, ngx_max_module * sizeof(void *));
// 初始化core模块
for (i = 0; cycle->modules[i]; i++) {
    // 检查type，只处理core模块，数量很少
    if (cycle->modules[i]->type != NGX_CORE_MODULE) {
        continue;
    }

    //获取core模块的函数表
    module = cycle->modules[i]->ctx;

    // 创建core模块的配置结构体
    // 有的core模块可能没有这个函数，所以做一个空指针检查
    if (module->create_conf) {
        rv = module->create_conf(cycle);
        if (rv == NULL) {
            ngx_destroy_pool(pool);
            return NULL;
        }
        // 存储到cycle的配置数组里，用的是index，不是ctx_index
        cycle->conf_ctx[cycle->modules[i]->index] = rv;
    }
}

9: NGX_CORE_MODULE模块
ngx_core_module
ngx_errlog_module
ngx_regex_module
ngx_thread_pool_module
ngx_events_module
ngx_openssl_module
ngx_http_module
ngx_mail_module
ngx_google_perftools_module
ngx_stream_module

10: 在阿里云上安装运行systemtap, 火焰图

11: HTTP请求流程
ngx_http_init_connection
ngx_event_accept
ngx_epoll_process_events
ngx_http_wait_request_handler
ngx_http_create_request
ngx_http_process_request_handler
ngx_http_read_request_header
ngx_http_parse_request_line
ngx_http_parse_header_line
ngx_http_process_request_headers
ngx_http_process_host
ngx_http_process_request  //读取了完整的请求头
ngx_http_handler
ngx_http_core_run_phases
ngx_http_core_rewrite_phase
ngx_http_core_find_config_phase
ngx_http_core_generic_phase
ngx_http_core_access_phase
ngx_http_core_post_access_phase
ngx_http_core_content_phase

ngx_http_core_main_conf_t有两个phase相关的成员变量,在ngx_http_block函数中，依次调用了各模块的 postconfiguration 函数，而玄机就在这些模块的postconfiguration函数里



12:  http配置结构  ngx_http_core.module.h
// 重要结构体，存储server、监听端口、变量等信息
typedef struct {
    // 存储http{}里定义的所有server，元素是ngx_http_core_srv_conf_t
    ngx_array_t                servers;         /* ngx_http_core_srv_conf_t */

    // 所有的http请求都要使用这个引擎处理
    ngx_http_phase_engine_t    phase_engine;

    ngx_hash_t                 headers_in_hash;

    ngx_hash_t                 variables_hash;

    // 存储http里定义的所有变量
    ngx_array_t                variables;         /* ngx_http_variable_t */
    ngx_array_t                prefix_variables;  /* ngx_http_variable_t */

    ngx_uint_t                 ncaptures;

    // server散列表设置
    ngx_uint_t                 server_names_hash_max_size;
    ngx_uint_t                 server_names_hash_bucket_size;

    // 变量散列表设置
    // 由指令variables_hash_max_size/variables_hash_bucket_size设置
    ngx_uint_t                 variables_hash_max_size;
    ngx_uint_t                 variables_hash_bucket_size;

    ngx_hash_keys_arrays_t    *variables_keys;

    // http{}里定义的所有监听端口
    ngx_array_t               *ports;

    ngx_uint_t                 try_files;       /* unsigned  try_files:1 */

    // http handler模块需要向这个数组添加元素
    // 在配置解析后的postconfiguration里向cmcf->phases数组注册
    // 在处理请求时不使用此数组，而是用的phase_engine
    ngx_http_phase_t           phases[NGX_HTTP_LOG_PHASE + 1];
} ngx_http_core_main_conf_t;

typedef struct {
    // 在ngx_http_core_server_name()里存储ngx_http_server_name_t
    /* array of the ngx_http_server_name_t, "server_name" directive */
    ngx_array_t                 server_names;

    /* server ctx */
    // 本server使用的配置结构体数组，避免多个server的冲突
    ngx_http_conf_ctx_t        *ctx;

    ngx_str_t                   server_name;

    size_t                      connection_pool_size;
    size_t                      request_pool_size;
    size_t                      client_header_buffer_size;

    ngx_bufs_t                  large_client_header_buffers;

    ngx_msec_t                  client_header_timeout;

    ngx_flag_t                  ignore_invalid_headers;
    ngx_flag_t                  merge_slashes;
    ngx_flag_t                  underscores_in_headers;

    unsigned                    listen:1;
#if (NGX_PCRE)
    unsigned                    captures:1;
#endif

    ngx_http_core_loc_conf_t  **named_locations;
} ngx_http_core_srv_conf_t;

// location的配置结构体
// 重要的成员是handler，定义此location特有的内容处理函数
struct ngx_http_core_loc_conf_s {
    // location的名字
    ngx_str_t     name;          /* location name */

#if (NGX_PCRE)
    ngx_http_regex_t  *regex;
#endif

    unsigned      noname:1;   /* "if () {}" block or limit_except */
    unsigned      lmt_excpt:1;

    // named location，也就是@开头的location
    unsigned      named:1;

    unsigned      exact_match:1;
    unsigned      noregex:1;

    unsigned      auto_redirect:1;
#if (NGX_HTTP_GZIP)
    unsigned      gzip_disable_msie6:2;
    unsigned      gzip_disable_degradation:2;
#endif

    ngx_http_location_tree_node_t   *static_locations;
#if (NGX_PCRE)
    ngx_http_core_loc_conf_t       **regex_locations;
#endif

    /* pointer to the modules' loc_conf */
    void        **loc_conf;

    uint32_t      limit_except;
    void        **limit_except_loc_conf;

    // 重要的成员，定义此location特有的内容处理函数
    ngx_http_handler_pt  handler;

    /* location name length for inclusive location with inherited alias */

    // 如果是alias别名功能，存储location的名字长度，即name.len
    size_t        alias;

    // 存储root/alias指定的路径
    ngx_str_t     root;                    /* root, alias */

    ngx_str_t     post_action;

    ngx_array_t  *root_lengths;
    ngx_array_t  *root_values;

    ngx_array_t  *types;
    ngx_hash_t    types_hash;
    ngx_str_t     default_type;

    // 允许post的最大body长度
    off_t         client_max_body_size;    /* client_max_body_size */

    off_t         directio;                /* directio */
    off_t         directio_alignment;      /* directio_alignment */

    size_t        client_body_buffer_size; /* client_body_buffer_size */

    // 默认值是0,只有socket发送缓冲区大于此值才会触发可写事件
    size_t        send_lowat;              /* send_lowat */

    // 默认值是1460，只有数据大于这个值才会真正发送
    // 用于提高效率，避免频繁的系统调用
    size_t        postpone_output;         /* postpone_output */

    // 限制速率
    // 用在ngx_http_write_filter_module.c
    size_t        limit_rate;              /* limit_rate */

    // 限制速率
    // 用在ngx_http_write_filter_module.c
    size_t        limit_rate_after;        /* limit_rate_after */

    // 发送数据的限制，默认是0，即不限制，尽量多发
    // 用在ngx_http_write_filter_module.c
    size_t        sendfile_max_chunk;      /* sendfile_max_chunk */

    size_t        read_ahead;              /* read_ahead */

    // 超时相关的参数
    ngx_msec_t    client_body_timeout;     /* client_body_timeout */
    ngx_msec_t    send_timeout;            /* send_timeout */
    ngx_msec_t    keepalive_timeout;       /* keepalive_timeout */
    ngx_msec_t    lingering_time;          /* lingering_time */
    ngx_msec_t    lingering_timeout;       /* lingering_timeout */
    ngx_msec_t    resolver_timeout;        /* resolver_timeout */

    ngx_resolver_t  *resolver;             /* resolver */

    time_t        keepalive_header;        /* keepalive_timeout */

    ngx_uint_t    keepalive_requests;      /* keepalive_requests */
    ngx_uint_t    keepalive_disable;       /* keepalive_disable */
    ngx_uint_t    satisfy;                 /* satisfy */
    ngx_uint_t    lingering_close;         /* lingering_close */
    ngx_uint_t    if_modified_since;       /* if_modified_since */
    ngx_uint_t    max_ranges;              /* max_ranges */
    ngx_uint_t    client_body_in_file_only; /* client_body_in_file_only */

    ngx_flag_t    client_body_in_single_buffer;
                                           /* client_body_in_singe_buffer */

    // 注意，下面的这些标志量没有使用bit field特性，而是直接用ngx_flag_t

    // location只能被子请求调用，不能被外部访问
    ngx_flag_t    internal;                /* internal */

    ngx_flag_t    sendfile;                /* sendfile */
    ngx_flag_t    aio;                     /* aio */
    ngx_flag_t    aio_write;               /* aio_write */
    ngx_flag_t    tcp_nopush;              /* tcp_nopush */
    ngx_flag_t    tcp_nodelay;             /* tcp_nodelay */
    ngx_flag_t    reset_timedout_connection; /* reset_timedout_connection */
    ngx_flag_t    absolute_redirect;       /* absolute_redirect */
    ngx_flag_t    server_name_in_redirect; /* server_name_in_redirect */
    ngx_flag_t    port_in_redirect;        /* port_in_redirect */
    ngx_flag_t    msie_padding;            /* msie_padding */
    ngx_flag_t    msie_refresh;            /* msie_refresh */
    ngx_flag_t    log_not_found;           /* log_not_found */

    // 子请求是否记录日志，默认不记录
    ngx_flag_t    log_subrequest;          /* log_subrequest */

    ngx_flag_t    recursive_error_pages;   /* recursive_error_pages */
    ngx_uint_t    server_tokens;           /* server_tokens */
    ngx_flag_t    chunked_transfer_encoding; /* chunked_transfer_encoding */
    ngx_flag_t    etag;                    /* etag */

#if (NGX_HTTP_GZIP)
    ngx_flag_t    gzip_vary;               /* gzip_vary */

    ngx_uint_t    gzip_http_version;       /* gzip_http_version */
    ngx_uint_t    gzip_proxied;            /* gzip_proxied */

#if (NGX_PCRE)
    ngx_array_t  *gzip_disable;            /* gzip_disable */
#endif
#endif

#if (NGX_THREADS || NGX_COMPAT)
    ngx_thread_pool_t         *thread_pool;
    ngx_http_complex_value_t  *thread_pool_value;
#endif

#if (NGX_HAVE_OPENAT)
    ngx_uint_t    disable_symlinks;        /* disable_symlinks */
    ngx_http_complex_value_t  *disable_symlinks_from;
#endif

    ngx_array_t  *error_pages;             /* error_page */
    ngx_http_try_file_t    *try_files;     /* try_files */

    ngx_path_t   *client_body_temp_path;   /* client_body_temp_path */

    ngx_open_file_cache_t  *open_file_cache;
    time_t        open_file_cache_valid;
    ngx_uint_t    open_file_cache_min_uses;
    ngx_flag_t    open_file_cache_errors;
    ngx_flag_t    open_file_cache_events;

    ngx_log_t    *error_log;

    ngx_uint_t    types_hash_max_size;
    ngx_uint_t    types_hash_bucket_size;

    // 使用queue串联起location
    ngx_queue_t  *locations;

#if 0
    ngx_http_core_loc_conf_t  *prev_location;
#endif
};

nginx module:
ngx_command_s {  //指令结构体
    ngx_str_t  name; //指令名称
    ngx_uint_t type; //指令类型，决定指令出现的位置、参数数量、类型等
    char *(*set)(ngx_conf_t *cf, ngx_command_t *cmd, void *conf); //指令解析函数，是函数指针
    ngx_unit_t conf; //http/stream模块使用，决定存储在main/server/location的哪个层次
    ngx_uint_t offset; //变量在conf结构体里的偏移量，可用offset得到 主要用于nginx内置的命令解析函数，自己写命令解析函数可以置为0
    void *post; //解析后处理的数据
}
// 标志指令的类型，出现的位置
#define NGX_HTTP_MAIN_CONF        0x02000000
#define NGX_HTTP_SRV_CONF         0x04000000
#define NGX_HTTP_LOC_CONF         0x08000000
#define NGX_HTTP_UPS_CONF         0x10000000
#define NGX_HTTP_SIF_CONF         0x20000000
#define NGX_HTTP_LIF_CONF         0x40000000
#define NGX_HTTP_LMT_CONF         0x80000000
指明一条配置指令的位置，通俗点讲就是出现在哪里合法，哪里不合法。下面给出一个经典的配置来说明一下:
http  {
     /* NGX_HTTP_MAIN_CONF类型的指令在这里  */
     upstream test {
         /* NGX_HTTP_UPS_CONF 类型的指令在这里 */
          ...
     }
     server {
           /* NGX_HTTP_SRV_CONF 指令在这里 */
           if (...) {
                 /* NGX_HTTP_SIF_CONF 在这里 */
           }
           location / {
                /* NGX_HTTP_LOC_CONF类型的指令在这里 */
                 limit_except  GET {
                         /* NGX_HTTP_LMT_CONF 类型的指令在这里 */
                        ...
                 }
                 if (...) {
                      /* NGX_HTTP_LIF_CONF类型的指令在这里 */
                 }
           }
     }
}
NGX_CONF_NOARGS: 指令没有参数
NGX_CONF_TAKE1: 指令读入1个参数
...
NGX_CONF_TAKE7: 指令读入7个参数
NGX_CONF_FLAG: 指令读入1个布尔型数据 ("on" or "off")
NGX_CONF_1MORE: 指令至少读入1个参数
NGX_CONF_2MORE: 指令至少读入2个参数


struct ngx_module_s {
    // 下面的几个成员通常使用宏NGX_MODULE_V1填充
 
    ngx_uint_t            ctx_index; // 每类(http/event)模块各自的index 初始化为-1
    ngx_uint_t            index;  // 在ngx_modules数组里的唯一索引，main()里赋值 使用计数器变量ngx_max_module
    char                 *name; // 1.10，模块的名字，标识字符串 由脚本生成ngx_module_names数组，然后在ngx_preinit_modules里填充
    ngx_uint_t            spare0;  // 两个保留字段，1.9之前有4个
    ngx_uint_t            spare1;
    ngx_uint_t            version; // nginx.h:#define nginx_version      1010000
    const char           *signature; // 模块的二进制兼容性签名，即NGX_MODULE_SIGNATURE

    // 模块不同含义不同,通常是函数指针表，是在配置解析的某个阶段调用的函数
    // core模块的ctx
    //typedef struct {
    //    ngx_str_t             name;
    //    void               *(*create_conf)(ngx_cycle_t *cycle);
    //    char               *(*init_conf)(ngx_cycle_t *cycle, void *conf);
    //} ngx_core_module_t;
    void                 *ctx;
    ngx_command_t        *commands;  // 模块支持的指令，数组形式，最后用空对象表示结束
    ngx_uint_t            type; // 模块的类型标识，相当于RTTI,如CORE/HTTP/STRM/MAIL等


    // 以下7个函数会在进程的启动或结束阶段被调用
    ngx_int_t           (*init_master)(ngx_log_t *log); // init_master目前nginx不会调用
    ngx_int_t           (*init_module)(ngx_cycle_t *cycle); // 在ngx_init_cycle里被调用 在master进程里，fork出worker子进程之前 
    ngx_int_t           (*init_process)(ngx_cycle_t *cycle); //ngx_worker_process_init 在worker进程进入工作循环之前被调用 
    ngx_int_t           (*init_thread)(ngx_cycle_t *cycle); // init_thread目前nginx不会调用
    void                (*exit_thread)(ngx_cycle_t *cycle); // exit_thread目前nginx不会调用
    void                (*exit_process)(ngx_cycle_t *cycle); // 在ngx_worker_process_exit调用
    void                (*exit_master)(ngx_cycle_t *cycle); // 在ngx_master_process_exit(os/unix/ngx_process_cycle.c)里调用

    // 下面8个成员通常用用NGX_MODULE_V1_PADDING填充
    // 暂时无任何用处
    uintptr_t             spare_hook0;
    uintptr_t             spare_hook1;
    uintptr_t             spare_hook2;
    uintptr_t             spare_hook3;
    uintptr_t             spare_hook4;
    uintptr_t             spare_hook5;
    uintptr_t             spare_hook6;
    uintptr_t             spare_hook7;
};

13: http请求处理阶段
ngx_http_core_generic_phase
ngx_http_core_rewrite_phase
ngx_http_core_find_config_phase
ngx_http_core_post_rewrite_phase
ngx_http_core_access_phase
ngx_http_core_post_access_phase
ngx_http_core_try_files_phase
ngx_http_core_content_phase

14: nginx core
数据结构  日志系统  网络模块   加解密  内存池  线程池  基本业务逻辑  文件系统  基础功能模块
nginx.c          //入口文件 
ngx_array.c      //数组
ngx_buf.c        //缓冲区
ngx_conf_file.c  //配置文件相关
ngx_config.h     //没有c文件 兼容各种系统平台，提供统一的接口
ngx_connection.c //网络连接
ngx_core.h       //包含整个core文件夹内对外提供的接口
ngx_cpuinfo.c    //没有头文件
ngx_crc32.c      //循环冗余校验 保证数据存储和数据通讯中数据正确
ngx_crypt.c      //加密
ngx_cycle.c      //ngx_cycle_t操作
ngx_file.c       //文件操作
ngx_hash.c       //哈希表
ngx_inet.c       //
ngx_list.c       //链表
ngx_log.c        //
ngx_md5.c        //
ngx_module.c     //
ngx_murmurhash.c //
ngx_open_file_cache.c  //
ngx_output_chain.c     //没有头文件
ngx_palloc.c     //
ngx_parse.c      //
ngx_parse_time.c //
ngx_proxy_protocol.c   //
ngx_queue.c      //队列
ngx_radix_tree.c //基数树 geo模块有用到 根据IP对变量进行赋值
ngx_rbtree.c     //红黑树
ngx_regex.c      //
ngx_resolver.c   //
ngx_rwlock.c     //
ngx_sha1.c       //
ngx_shmtx.c      //
ngx_slab.c       //
ngx_spinlock.c   //没有头文件
ngx_string.c     //
ngx_syslog.c     //
ngx_thread_pool.c      //
ngx_times.c      //

15: 网络模块结构体
ngx_listening_s  //设置socket监听
ngx_connection_s //存储连接信息和读写事件

16: 文件结构层次
http://blog.csdn.net/chenhanzhun/article/details/42742097
实现对各模块的整体控制，入口文件
基本数据结构及其操作
基本配置管理
网络连接管理
定义头文件和结构别名
CRC校验表信息
实现对系统运行过程参数、资源的通用管理
文件操作
日志输出和管理
hash字符串操作
内存管理
pcre上层封装
反向代理协议信息
正则表达式
时间获取管理
杂集   ngx_resolver  ngx_sha1 ngx_spinlock  ngx_crypt

17: 再谈ningx源码结构层次
https://github.com/y123456yz/reading-code-of-nginx-1.9.2.git
1、 配置编译过程中相关脚本调用过程详细注释
2、 用户自由模块编译添加过程
3、 nginx使用的进程间通信方式(共享内存， 原子操作，自旋锁，信号， 信号量 信号量， 互斥锁， channel通信)
4、 nginx自定义高级数据结构详解(队列, 链表, 红黑树, 散列表等,)
5、 配置文件解析流程
6、 nginx启动、退出过程分析
7、 连接池和内存池分配管理过程
8、 对客户端链接如何实现负载均衡，惊群问题避免
9、 主动链接、被动链接过程分析
10、epoll事件驱动机制，epoll模型详解，包括读写异步非阻塞机制及流程
11、时间机制和定时器详解
12、异步I/O，sendfile代码分析
13、HTTP请求行、请求头部、包体异步读取解析过程
14、HTTP框架处理流程及11个阶段处理及调用过程
15、HTTP异步非阻塞发送HTTP头部和包体过程
16、HTTP阻塞任务如何拆分
17、任务处理完毕执行流程
18、资源回收过程

18: 模块编译链接
使用C编译器编译Nginx官方提供的模块，使用c++编译器编译第三方模块，使用C++编译器把所有的模块链接起来。

19: 处理http配置项的4个步骤
1、 创建数据结构用于存储配置项对应的参数
2、 设定配置项在nginx.conf中出现的限制条件与回调方法
3、 实现第二步中的回调方法，或使用nginx预设的14个回调方法
4、 合并不同级别的配置项中出现的同名配置项
这4个步骤是通过两个数据结构ngx_http_module_t和ngx_command_t与nginx有机地结合起来
由于多个location块(http块、server块)中的相同配置项允许同时生效，所以ngx_http_mytest_conf_t结构必须在nginx的内存中保存许多份。

解析nginx.conf配置文件时，一旦解析到http{}块，将调用所有HTTP模块的create_mian_conf, create_srv_conf, create_loc_conf方法创建3组结构体，以便存放各个HTTP模块感兴趣的main级别配置项；在解析到任何一个server{}块时，又会调用所有HTTP模块的create_srv_conf, create_loc_conf方法创建2组结构体，以存放各个HTTP模块感兴趣的srv级别配置项；在解析到任何一个location{}块时，则会调用所有HTTP模块的create_loc_conf方法创建1组结构体，用于存放各个HTTP模块感兴趣的loc级别配置项。
之所以这样是为了解决同名配置项的合并问题。不同级别下同名配置项冲突时，HTTP模块自行决定其行为。
server可以存在许多个，location可以反复嵌套
请求上下文 ＋ 配置
生成的配置结构体放在哪里，如何关联的？？？？

20: HTTP请求上下文
请求的上下文和模块相关联

ngx_module_t        模块
ngx_http_module_t   http模块可提供配置命令
ngx_command_t       具体关键字的行为

ngx_conf_handler(ngx_conf_t *cf, ngx_int_t last)  //模块中寻找匹配的指令，进行解析

create_main_conf
create_srv_conf
create_loc_conf
preconfiguration
ngx_conf_parse
init_main_conf
ngx_http_merge_servers
ngx_http_init_locations
ngx_http_init_static_location_trees
ngx_http_init_phases
ngx_http_init_headers_in_hash
ngx_http_variables_init_vars
ngx_http_init_phase_handlers
ngx_http_optimize_servers


nginx 的所有共享内存，都是在配置文件解析完毕后由 master 负责申请的，worker 进程运行期间每块共享内存大小都是固定的，也不会去申请。
Top 命令的 SHR 表示的是一个进程使用的共享内存的大小，这些内存可能也被其他的进程使用着


21: lua源码
数据结构
算法
词法语法
GC
VM
stack与C语言的交互













