

ngx_event_process_init(ngx_cycle_t *cycle);

ngx_queue_init(&ngx_posted_accept_events);
ngx_queue_init(&ngx_posted_events);
ngx_queue_init(&ngx_posted_delayed_events);



ngx_process_events_and_timers(ngx_cycle_t *cycle);

ngx_queue_empty(&ngx_posted_delayed_events);
ngx_process_events(cycle, timer, flags);
ngx_event_process_posted(cycle, &ngx_posted_accept_events);
ngx_event_process_posted(cycle, &ngx_posted_events);

ngx_queue_empty(&ngx_posted_delayed_events)
ngx_queue_head(&ngx_posted_delayed_events);
ngx_queue_data(q, ngx_event_t, queue);
ngx_queue_sentinel(&ngx_posted_delayed_events);
ngx_delete_posted_event(ev);
ev->handler(ev);


nginx使用了间接回调机制，结合upstream机制的使用来说明一下，首先明确几个事实：
1）其实ngxin和下游客户端的连接使用的是ngx_http_connection_t，每个连接对应着一个读事件、一个写事件，epoll监听队列监听的是事件（ngx_event_t），但是事件的data字段对应于这个事件所属的连接（ngx-connection_t）。但是nginx和上游服务器之间的连接使用的ngx_peer_connection_t，其实ngx_peer_connection_t是ngx_connection_t结构体的封装，前者包括了后者，算是后者的高级应用
2）ngx_connection_t对应nginx和客户端的连接，每个这样的连接都有一个请求（ngx_http_request_t）与之相对应，同时请求中有连个字段，write_event_handler和read_event_handler，这连个字段属于请求的读写回调，但是他很显然不能被激活，能激活的就是读写事件（ngx_event_t）
3）在HTTP请求的后期阶段，nginx通过连接上的读写事件回调（这个已经被epoll监控）来间接调用请求上的读写回调，这么一来，如果想该变请求上的流程，只需要修改
ngx_http_request_t上的read_event_handler和write_event_handler即可，这样的实现可以在ngx_http_handler函数中体现
4）nginx在处理upstream和上游的连接时，每一个upstream连接（ngx_peer_connection_t）对应一个upstream机制(ngx_http_upstream_t)，因为upstream的连接也可以看成ngx-connection_t,所以和ngx_connection_t类似，ngx_http_upstream_t中也有两个字段read_event_handler和write_event-handler,这样在处理和上游的连接上的读写回调时也是间接调用了ngx_http_upstream_t的读写回调函数 这个在ngx_http_upstream_connection中可以看到 c=u->peer.connection，这里的c(ngx-connection_t)是和上游服务器之间的连接
c->write->hanlder = ngx_http_upstream_handler，在这一行和接下来的几行，认真阅读，会发现ngx_http_upstream_handler和ngx_http_handler有相似之处
5）这么一来，在接下来的处理中只需关注ngx_http_upstream_t上的读写（write_event_handler & read_event_handler）即可完成nginx和上游服务器之间的交互，只需关系ngx_http_request_t中的读写（write_event_handler & read_event_handler）即可完成nginx和客户端之间的监护
（总结：在连诶http请求和经过upstream机制的请求时，一定要明白当前的ngx_connection_t是指nginx和谁之间的连接）



ngx_http_init_phase_handlers(ngx_conf_t *cf, ngx_http_core_main_conf_t *cmcf); //初始化http请求回调函数

nginx模块：
event module: 搭建了独立于操作系统的事件处理机制的框架，及提供了各具体事件的处理。包括 ngx_events_module， ngx_event_core_module和ngx_epoll_module 等。Nginx 具体使用何种事件处理模块，这依赖于具体的操作系统和编译选项。

phase handler: 此类型的模块也被直接称为 handler 模块。主要负责处理客户端请求并产生待响应内容，比如 ngx_http_static_module 模块，负责客户端的静态页面请求处理并将对应的磁盘文件准备为响应内容输出。

output filter: 也称为 filter 模块，主要是负责对输出的内容进行处理，可以对输出进行修改。例如，可以实现对输出的所有 html 页面增加预定义的 footbar 一类的工作，或者对输出的图片的 URL 进行替换之类的工作。

upstream: upstream 模块实现反向代理的功能，将真正的请求转发到后端服务器上，并从后端服务器上读取响应，发回客户端。upstream 模块是一种特殊的 handler，只不过响应内容不是真正由自己产生的，而是从后端服务器上读取的。

load-balancer: 负载均衡模块，实现特定的算法，在众多的后端服务器中，选择一个服务器出来作为某个请求的转发服务器。


worker 进程中，ngx_worker_process_cycle()函数就是这个无限循环的处理函数。在这个函数中，一个请求的简单处理流程如下：
操作系统提供的机制（例如 epoll, kqueue 等）产生相关的事件。
接收和处理这些事件，如是接受到数据，则产生更高层的 request 对象。
处理 request 的 header 和 body。
产生响应，并发送回客户端。
完成 request 的处理。
重新初始化定时器及其他事件。

nginx源码注释：
https://github.com/chronolaw/annotated_nginx
nginx源码分析之设计之美：
http://www.bijishequ.com/detail/54155

question:
1: lua如何嵌套入nginx的
ngx_http_lua_new_state(lua_State *parent_vm, ngx_cycle_t *cycle,ngx_http_lua_main_conf_t *lmcf, ngx_log_t *log);
ngx_http_lua_create_ctx(ngx_http_request_t *r);
ngx_http_lua_init(ngx_conf_t *cf);

2: nginx如何做到模块化的

3: stream模块初始化luaVM
static ngx_int_t ngx_stream_lua_init(ngx_conf_t *cf);
static ngx_inline ngx_stream_lua_ctx_t * ngx_stream_lua_create_ctx(ngx_stream_session_t *r);

4: http配置模块解析
// ngx_http_config.h
// 标志指令的类型，出现的位置
#define NGX_HTTP_MAIN_CONF        0x02000000
#define NGX_HTTP_SRV_CONF         0x04000000
#define NGX_HTTP_LOC_CONF         0x08000000
#define NGX_HTTP_UPS_CONF         0x10000000
#define NGX_HTTP_SIF_CONF         0x20000000
#define NGX_HTTP_LIF_CONF         0x40000000
#define NGX_HTTP_LMT_CONF         0x80000000
// nginx_http.c
// 解析http{}配置块，里面有server{}/location{}等
// 只有出现这个指令才会在conf_ctx里创建http配置，避免内存浪费
// 统计http模块的数量,设置http模块的ctx_index，即http模块自己的序号
// 调用每个http模块的create_xxx_conf函数，创建配置结构体
// 初始化http处理引擎的阶段数组，调用ngx_array_init
// 整理所有的http handler模块，填入引擎数组
// 调用ngx_create_listening添加到cycle的监听端口数组，只是添加，没有其他动作
// 设置有连接发生时的回调函数ngx_http_init_connection
static char *ngx_http_block(ngx_conf_t *cf, ngx_command_t *cmd, void *conf);

5: listen放在server里面的吗，可以放到http中吗
ngx_conf_t
ngx_cycle_t
ngx_command_t
ngx_module_t
ngx_http_conf_ctx_t

6: 指针的指针的用途
需要修改指针指向的时候，参数传入指针的指针

7: http处理阶段是如何添加handler的
// http模块的函数表，在配置解析阶段被框架调用
typedef struct {
    // ngx_http_block里，创建配置结构体后，开始解析之前调用
    // 常用于添加变量定义
    ngx_int_t   (*preconfiguration)(ngx_conf_t *cf);

    // ngx_http_block里，解析、合并完配置后调用
    // 常用于初始化模块的phases handler
    ngx_int_t   (*postconfiguration)(ngx_conf_t *cf);

    // 创建模块的main配置，只有一个，在http main域
    void       *(*create_main_conf)(ngx_conf_t *cf);

    // 初始化模块的main配置，只有一个，在http main域
    char       *(*init_main_conf)(ngx_conf_t *cf, void *conf);

    // 创建、合并模块的srv配置
    void       *(*create_srv_conf)(ngx_conf_t *cf);
    char       *(*merge_srv_conf)(ngx_conf_t *cf, void *prev, void *conf);

    // 创建、合并模块的location配置
    void       *(*create_loc_conf)(ngx_conf_t *cf);
    char       *(*merge_loc_conf)(ngx_conf_t *cf, void *prev, void *conf);
} ngx_http_module_t;
模块需注册postconfiguration函数，在此函数中实现
cmcf = ngx_http_conf_get_module_main_conf(cf, ngx_http_core_module);
h = ngx_array_push(&cmcf->phases[NGX_HTTP_REWRITE_PHASE].handlers);
if (h == NULL) {
    return NGX_ERROR;
}
*h = ngx_http_lua_rewrite_handler;

8: ngx_cycle_t->conf_ctx
void ****conf_ctx;
cycle->conf_ctx = ngx_pcalloc(pool, ngx_max_module * sizeof(void *));
// 初始化core模块
for (i = 0; cycle->modules[i]; i++) {
    // 检查type，只处理core模块，数量很少
    if (cycle->modules[i]->type != NGX_CORE_MODULE) {
        continue;
    }

    //获取core模块的函数表
    module = cycle->modules[i]->ctx;

    // 创建core模块的配置结构体
    // 有的core模块可能没有这个函数，所以做一个空指针检查
    if (module->create_conf) {
        rv = module->create_conf(cycle);
        if (rv == NULL) {
            ngx_destroy_pool(pool);
            return NULL;
        }
        // 存储到cycle的配置数组里，用的是index，不是ctx_index
        cycle->conf_ctx[cycle->modules[i]->index] = rv;
    }
}

9: NGX_CORE_MODULE模块
ngx_core_module
ngx_errlog_module
ngx_regex_module
ngx_thread_pool_module
ngx_events_module
ngx_openssl_module
ngx_http_module
ngx_mail_module
ngx_google_perftools_module
ngx_stream_module

10: 在阿里云上安装运行systemtap, 火焰图


nginx module:
ngx_command_s {  //指令结构体
    ngx_str_t  name; //指令名称
    ngx_uint_t type; //指令类型，决定指令出现的位置、参数数量、类型等
    char *(*set)(ngx_conf_t *cf, ngx_command_t *cmd, void *conf); //指令解析函数，是函数指针
    ngx_unit_t conf; //http/stream模块使用，决定存储在main/server/location的哪个层次
    ngx_uint_t offset; //变量在conf结构体里的偏移量，可用offset得到 主要用于nginx内置的命令解析函数，自己写命令解析函数可以置为0
    void *post; //解析后处理的数据
}
// 标志指令的类型，出现的位置
#define NGX_HTTP_MAIN_CONF        0x02000000
#define NGX_HTTP_SRV_CONF         0x04000000
#define NGX_HTTP_LOC_CONF         0x08000000
#define NGX_HTTP_UPS_CONF         0x10000000
#define NGX_HTTP_SIF_CONF         0x20000000
#define NGX_HTTP_LIF_CONF         0x40000000
#define NGX_HTTP_LMT_CONF         0x80000000
指明一条配置指令的位置，通俗点讲就是出现在哪里合法，哪里不合法。下面给出一个经典的配置来说明一下:
http  {
     /* NGX_HTTP_MAIN_CONF类型的指令在这里  */
     upstream test {
         /* NGX_HTTP_UPS_CONF 类型的指令在这里 */
          ...
     }
     server {
           /* NGX_HTTP_SRV_CONF 指令在这里 */
           if (...) {
                 /* NGX_HTTP_SIF_CONF 在这里 */
           }
           location / {
                /* NGX_HTTP_LOC_CONF类型的指令在这里 */
                 limit_except  GET {
                         /* NGX_HTTP_LMT_CONF 类型的指令在这里 */
                        ...
                 }
                 if (...) {
                      /* NGX_HTTP_LIF_CONF类型的指令在这里 */
                 }
           }
     }
}
NGX_CONF_NOARGS: 指令没有参数
NGX_CONF_TAKE1: 指令读入1个参数
...
NGX_CONF_TAKE7: 指令读入7个参数
NGX_CONF_FLAG: 指令读入1个布尔型数据 ("on" or "off")
NGX_CONF_1MORE: 指令至少读入1个参数
NGX_CONF_2MORE: 指令至少读入2个参数


struct ngx_module_s {
    // 下面的几个成员通常使用宏NGX_MODULE_V1填充
 
    ngx_uint_t            ctx_index; // 每类(http/event)模块各自的index 初始化为-1
    ngx_uint_t            index;  // 在ngx_modules数组里的唯一索引，main()里赋值 使用计数器变量ngx_max_module
    char                 *name; // 1.10，模块的名字，标识字符串 由脚本生成ngx_module_names数组，然后在ngx_preinit_modules里填充
    ngx_uint_t            spare0;  // 两个保留字段，1.9之前有4个
    ngx_uint_t            spare1;
    ngx_uint_t            version; // nginx.h:#define nginx_version      1010000
    const char           *signature; // 模块的二进制兼容性签名，即NGX_MODULE_SIGNATURE

    // 模块不同含义不同,通常是函数指针表，是在配置解析的某个阶段调用的函数
    // core模块的ctx
    //typedef struct {
    //    ngx_str_t             name;
    //    void               *(*create_conf)(ngx_cycle_t *cycle);
    //    char               *(*init_conf)(ngx_cycle_t *cycle, void *conf);
    //} ngx_core_module_t;
    void                 *ctx;
    ngx_command_t        *commands;  // 模块支持的指令，数组形式，最后用空对象表示结束
    ngx_uint_t            type; // 模块的类型标识，相当于RTTI,如CORE/HTTP/STRM/MAIL等


    // 以下7个函数会在进程的启动或结束阶段被调用
    ngx_int_t           (*init_master)(ngx_log_t *log); // init_master目前nginx不会调用
    ngx_int_t           (*init_module)(ngx_cycle_t *cycle); // 在ngx_init_cycle里被调用 在master进程里，fork出worker子进程之前 
    ngx_int_t           (*init_process)(ngx_cycle_t *cycle); //ngx_worker_process_init 在worker进程进入工作循环之前被调用 
    ngx_int_t           (*init_thread)(ngx_cycle_t *cycle); // init_thread目前nginx不会调用
    void                (*exit_thread)(ngx_cycle_t *cycle); // exit_thread目前nginx不会调用
    void                (*exit_process)(ngx_cycle_t *cycle); // 在ngx_worker_process_exit调用
    void                (*exit_master)(ngx_cycle_t *cycle); // 在ngx_master_process_exit(os/unix/ngx_process_cycle.c)里调用

    // 下面8个成员通常用用NGX_MODULE_V1_PADDING填充
    // 暂时无任何用处
    uintptr_t             spare_hook0;
    uintptr_t             spare_hook1;
    uintptr_t             spare_hook2;
    uintptr_t             spare_hook3;
    uintptr_t             spare_hook4;
    uintptr_t             spare_hook5;
    uintptr_t             spare_hook6;
    uintptr_t             spare_hook7;
};



