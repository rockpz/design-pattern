1: 查看端口
netstat -apn|grep port

2: 应用程序添加快捷方式
ls -

3: 查看目录占用空间
df -lh
du -h --max-depth=1 /data

4: memcache查看所有的key
telnet 127.0.0.1 11211

stats items

stats cachedump 3 0

get key

memcache设值
set key 0 0 9
123456789


5: 查看进程启动时间
ps axo pid,ppid,comm,pmem,lstart | grep scim

6:  安装VUE
npm install -g vue-cli
vue init webpack my-project

cd my-project
npm install
npm run dev


7: ssh证书登录


8: git命令
git checkout -b develop     本地创建一个新分支
git push --set-upstream origin develop   将本地分支推送到远程
git remote show origin      显示远程仓库信息

9: 复制文件夹
说明: cp指令用于复制文件或目录，如同时指定两个以上的文件或目录，且最后的目的地是一个已经存在的目录，则它会把前面指定的所有文件或目录复制到此目录中。若同时指定多个文件或目录，而最后的目的地并非一个已存在的目录，则会出现错误信息
参数:
-a 或 --archive 此参数的效果和同时指定"-dpR"参数相同
-b 或 --backup 删除、覆盖目的文件先备份，备份的文件或目录亦建立为符号链接，并指向源文件或目录链接的源文件或目录。假如没有加上这个参数，在复制过程中若遇到符号链接，则会直接复制源文件或目录
-f 或 --force 强行复制文件或目录， 不论目的文件或目录是否已经存在
-i 或 --interactive 覆盖文件之前先询问用户
-l 或 --link 对源文件建立硬链接，而非复制文件
-p 或 --preserve 保留源文件或目录的属性，包括所有者、所属组、权限与时间
-P 或 --parents 保留源文件或目录的路径，此路径可以是绝对路径或相对路径，且目的目录必须已经丰在
-r 递归处理，将指定目录下的文件与子目录一并处理。若源文件或目录的形态，不属于目录或符号链接，则一律视为普通文件处理
-R 或 --recursive 递归处理，将指定目录下的文件及子目录一并处理
-s 或 --symbolic-link 对源文件建立符号链接，而非复制文件
-S <备份字尾字符串> 或 --suffix=<备份字尾字符串> 用"-b"参数备份目的文件后，备份文件的字尾会被加上一个备份字符串。默认的备份字尾符串是符号"~"
-u 或 --update 使用这项参数之后，只会在源文件的修改时间(Modification Time)较目的文件更新时，或是名称相互对应的目的文件并不存在，才复制文件
-v 或 --verbose 显示执行过程
-V <备份方式> 或 --version-control=<备份方式> 指定当备份文件时，备份文件名的命名方式，有以下3种:
1.numbered或t, 将使用备份编号，会在字尾加上~1~字符串，其数字编号依次递增
2.simple或never 将使用简单备份，默认的备份字尾字符串是~, 也可通过-S来指定
3.existing或nil将使用当前方式，程序会先检查是否存在着备份编号，若有则采用备份编号，若无则采用简单备份
-x 或 --one-file-system 复制的文件或目录存放的文件系统，必须与cp指令执行时所处的文件系统相同，否则不复制，亦不处理位于其他分区的文件
--help 显示在线帮助
--sparse=<使用时机> 设置保存希疏文件的时机
--version 显示版本

10: mysql 
show create table stats_niuniu_room;   //查看表stats_niuniu_room 的创建语句

11: 统计端口链接状态
netstat -n |grep 8000|  awk '/^tcp/ {++S[$NF]} END {for(a in S) print a, S[a]}'
TIME_WAIT   814    主动关闭
CLOSE_WAIT  1      被动关闭
FIN_WAIT1   1    
ESTABLISHED 634    正在通信
SYN_RECV    2
LAST_ACK    1




https://bugs.php.net/bug.php?id=73800

https://nodejs.org/api/net.html#net_socket_settimeout_timeout_callback




https://www.openresty.com.cn/X-WAF-README.html



mysql -h10.10.129.20 -ugamehall_user -p -e 'select * from `gamehall_accountlogs`.memaccountlog_20170801 where type=45'  > 20170801.txt


12: ssh免密登录
/home/SuperAdmin/.ssh/authorized_keys
./Users/yiihua/.ssh/id_rsa.pub
id_rsa      id_rsa.pub  known_hosts

13: 从chrome源码看DNS解析过程
https://zhuanlan.zhihu.com/p/32531969


14: 查看进程占用内存
如果 Virt 稳定，只有 shr 上涨，就我来看并不是个问题。正如 tokers 指出的，Nginx 
的共享内存只有在进程退出时才释放，所以随着程序运行，shr 自然会不断上涨的（直到用完事先规划好的份额）。 
这是个预期行为。 

如果你在意到底是哪一块共享内存消耗了 2G，可以在启动 Nginx 的时候加上 strace，记下 mmap 
MAP_SHARED|MAP_ANONYMOUS 的返回地址，然后通过 pmap -X 
$pid，就可以查看到每个共享内存分配值和实际使用到值。


15: UML建模
静态建模：系统基础和系统固定框架结构
类图   class diagram     常用来分析业务概念
用例图 use case diagram   常用   表示某个(些)用户能够执行哪些功能
对象图 object diagram     不常用
构建图 component diagram  偶尔用 表示组件之间的关系
部署图 deployment diagram 偶尔用 部署软件应用的物理设备信息
包图   package diagram    不常用

动态建模：描述的是某种行为
活动图  activity diagram   偶尔用  流程图
时序图  sequence diagram   常用 一段时间范围内多个对象之间的交互信息，强调信息交互的时间顺序
状态机图 state machine diagram 偶尔用
通讯图  communication diagram  不常用
时间图  不常用

UML类图关系： 
泛化(generalization) 一种继承关系，指定了子类如何特化父类的所有特征和行为 
实现(realization)    类和接口的关系，表示类是接口所有特征和行为的实现
关联(association)    使一个类知道另一个类的属性和方法
聚合(aggregation)    整体与部分的关系，且部分可以离开整体而单独存在
组合(composition)    整体和部分的关系，但部分不能离开整体而单独存在
依赖(dependency)     是一种使用关系，即一个类的实现需要另一个类的协助

16: SSL协议之数据加密过程详解
https://zhuanlan.zhihu.com/p/32513816

17: 数组操作利器
forEach
map
filter
reduce

18: koa
https://chenshenhai.github.io/koa2-note/note/mysql/async.html
https://blog.innermonkdesign.com/how-to-use-mysql-and-asyncawait-with-your-koa-node-js-application/



























